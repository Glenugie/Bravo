package com.bravo.view;

import com.bravo.utils.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SpringLayout;

public class RegisterDialog extends javax.swing.JDialog {
	private static final long serialVersionUID = 5427903396379849829L;
	private MainWindow mainWindow;
    JTextField username;
    JPasswordField password;
    JPasswordField confirmPassword;
    JTextField email;
    JTextField confirmEmail;

    public RegisterDialog(MainWindow mw, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        mainWindow = mw;
        initComponents();
        initMyComponents();
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        this.getRootPane().registerKeyboardAction(closeActionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);
    }
    
    ActionListener closeActionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            dispose();
        }
    };
    

    private void initMyComponents() {
        this.setTitle(("Register"));

        JPanel registerPanel = new JPanel(new SpringLayout());
        username = new JTextField();
        password = new JPasswordField();
        confirmPassword = new JPasswordField();
        email = new JTextField();
        confirmEmail = new JTextField();
        JButton registerButton = new JButton("Register an Account");
        registerButton.addActionListener(registerButtonAL);
        
        registerPanel.add(new JLabel("Username: "));
        registerPanel.add(username);
        registerPanel.add(new JLabel("Password: "));
        registerPanel.add(password);
        registerPanel.add(new JLabel("Confirm: "));
        registerPanel.add(confirmPassword);
        registerPanel.add(new JLabel("Email: "));
        registerPanel.add(email);
        registerPanel.add(new JLabel("Confirm: "));
        registerPanel.add(confirmEmail);
        
        SpringUtilities.makeCompactGrid(registerPanel, 5, 2, 10, 10, 10, 10);
        this.add(registerPanel);
        
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(registerButton);
        this.add(buttonPanel);
    }    
    ActionListener registerButtonAL = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
    		try {
    			if (!username.getText().equals("") && !String.valueOf(password.getPassword()).equals("") && !String.valueOf(confirmPassword.getPassword()).equals("") && !email.getText().equals("") && !confirmEmail.getText().equals("")) {
	    			ArrayList<HashMap<String, Object>> usernameCheck = Mysql.query("SELECT userId FROM users WHERE username='"+username.getText()+"'");
	    			ArrayList<HashMap<String, Object>> emailCheck = Mysql.query("SELECT userId FROM users WHERE email='"+email.getText()+"'");
	    			if (usernameCheck.size() > 0) {
	    				Utils.error("That username is already taken");
	    			} else if (emailCheck.size() > 0) {
	    				Utils.error("That email address is already taken");
	    			} else if (!String.valueOf(password.getPassword()).equals(String.valueOf(password.getPassword()))) {
	    				Utils.error("Passwords do not match");
	    			} else if (!email.getText().equals(confirmEmail.getText())) {
	    				Utils.error("Email addresses do not match");
	    			} else {
	    				Mysql.query("INSERT INTO users (username, email, password) VALUES ('"+username.getText()+"', '"+Utils.passEncrypt(password.getPassword())+"', '"+email.getText()+"')");
		    			ArrayList<HashMap<String, Object>> userIdCheck = Mysql.query("SELECT userId FROM users WHERE username='"+username.getText()+"'");
	    				mainWindow.setUser((Long) userIdCheck.get(0).get("userId"));
	    				dispose();
	    			}
    			} else {
    				Utils.error("You didn't fill out a required field");
    			}
    		} catch (Exception e) {
    			e.printStackTrace();
    			Utils.error("Misc Error");
    		}
        }
    };

    public void update() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
